{"name":"image-uploader","tagline":"A simple and elegant PHP library for securely uploading images","body":"# image-uploader\r\n\r\n> A simple and elegant PHP library for securely uploading images\r\n\r\nThe aim of this project is to provide users with a **simple** interface to upload images in their applications in a **highly secure** manner while also being **highly customizable**.\r\n\r\nThe uploaded images go through a lot of security checks before they are uploaded.\r\n\r\n## Features\r\n\r\n1. A **clean** interface - **easy to use**.\r\n\r\n2. Uploaded images are referenced by a unique identifier - **removes the hassles of storage from the user**.\r\n\r\n3. **Customizable** - users of this library can operate on the uploaded images(i.e. crop, add filters, etc.) without even worrying about the uploading process.\r\n\r\n4. **Highly secure** - a lot of security checks were compiled from many sources into this one library.\r\n\r\n## Security Checklist\r\n\r\n1. Checks `$_FILES` parameter for correctness.\r\n\r\n2. Checks uploaded image file size, where `min` and `max` sizes are given by the user.\r\n\r\n3. Checks upload errors by analyzing the variable `$_FILES[\"image-name\"][\"error\"]`\r\n\r\n4. Checks for unwanted bytes in the first 100 bytes of the uploaded image.\r\n\r\n5. Checks image's mime type by using the `getimagesize` function. Does not rely on `$_FILES[\"image-name\"][\"type\"]`.\r\n\r\n6. Reprocesses the image using the [GD](http://php.net/manual/en/book.image.php) library to remove any malicious code.\r\n\r\n7. Renames the uploaded image, uses `md5` hash(with a user given salt) as the new image name.\r\n\r\n8. Uses [move\\_uploaded\\_file](http://php.net/manual/en/function.move-uploaded-file.php) to properly move the uploaded file to the target destination as well as setting appropriate permissions.\r\n\r\n## Prerequisites\r\n\r\n1. Successfully tested on PHP >= 5.5\r\n\r\n\r\n2. [GD](http://php.net/manual/en/book.image.php) library\r\n\r\n ```\r\n sudo apt-get install php5-gd\r\n\r\n sudo service apache2 restart\r\n ```\r\n\r\n## Installation\r\n\r\n### Composer\r\n\r\nAdd the following in your composer.json:\r\n\r\n```js\r\n{\r\n  \"require\": {\r\n    \"dhaval/image-uploader\": \"dev-master\"\r\n  }\r\n}\r\n```\r\n\r\nAnd then run\r\n\r\n```\r\nphp composer.phar install\r\n```\r\n\r\nInclude `image-uploader` in your php code\r\n\r\n```php\r\nrequire(\"vendor/autoload.php\");\r\n```\r\n\r\n### Manually\r\n\r\nClone this repository in your project's home directory\r\n\r\n```\r\ngit clone https://github.com/dhavalkapil/image-uploader\r\n```\r\n\r\nInclude `ImageUploader.php` in your php code.\r\n\r\n```php\r\nrequire(\"image-uploader/src/ImageUploader.php\");\r\n```\r\n\r\n## Usage\r\n\r\n### Frontend\r\n\r\nFirst of all create an HTML form to allow people to upload files\r\n\r\n```html\r\n<form method=\"POST\" action = \"submit.php\" enctype=\"multipart/form-data\">\r\n <input type=\"file\" name=\"my_image\" />\r\n <input type=\"submit\" value=\"Upload\" />\r\n</form>\r\n```\r\n\r\n### Backend\r\n\r\nCreate an instance of `ImageUploader` and set appropriate attributes\r\n\r\n```php\r\n$imageUploader = new ImageUploader();\r\n\r\n// Compulsory\r\n$imageUploader->setPath(\"my/upload/image/dir\");   // The directory where images will be uploaded\r\n\r\n// The rest are optional\r\n$imageUploader->setSalt(\"my_application_specific_salt\");  // It is used while hashing image names\r\n$imageUploader->setMinFileSize(0);                           // Set minimum file size in bytes\r\n$imageUploader->setMaxFileSize(100000);                      // Set maximum file size in bytes\r\n```\r\n\r\nYou can also pass these attributes directly while calling the constructor.\r\n\r\nIt is advised to create the upload directory(passed above in path) as follows:\r\n\r\n```\r\nmkdir upload_dir\r\nchmod 755 upload_dir\r\n[sudo] chown www-data:www-data upload_dir\r\n```\r\n\r\n**Note**: `www-data` is the user that apache runs under. You might need to change it depending on your machine.\r\n\r\nTo upload an image use the `upload` function\r\n\r\n```php\r\n$imageUploader->upload($_FILES[\"my_image\"], \"my_id\");\r\n```\r\n\r\nHere, `my_image` was the name of the input element in your HTML and `my_id` is a unique identifier for your image. This needs to be decided by the user.\r\n\r\nTo serve an image at a particular page use the `serve` function\r\n\r\n```php\r\n$imageUploader->serve(\"my_id\");\r\n```\r\n\r\nThe image uploaded with this particular identifier will be served. Hence, there will be no direct link to the image itself. This allows for images to be served at say /user/\\<user\\_id\\>/image. Where `user_id` might be used as an identifier for user images.\r\n\r\nCheck out sample [example](https://github.com/DhavalKapil/image-uploader/tree/master/example) for more details.\r\n\r\n### Additional Usage\r\n\r\nYou can also check whether a particular image exists for a given identifier using the `exists` function\r\n\r\n```php\r\n$result = $imageUploader->exists(\"my_id\");\r\n```\r\n\r\nIt returns a boolean value.\r\n\r\nYou can also customize the uploaded image, say by adding filters, cropping, etc by passing a `callback` function to the `upload` or `serve` function.\r\n\r\n```php\r\n$callback = function(&$image) {\r\n imagefilter($image, IMG_FILTER_GRAYSCALE);\r\n};\r\n\r\n$imageUploader->upload($_FILES[\"my_image\"], \"my_id\", $callback);\r\n```\r\n\r\nThis `callback` accepts a reference `&$image`, which is an image resource used by the [GD](http://php.net/manual/en/book.image.php) library. If passed to the `upload` function, it is called just before the image is being saved. Whereas, if passed to the `serve` function, it is called just before the image is buffered to the browser.\r\n\r\n## Contribution\r\n\r\nContributions are welcome to this repository. If you know of any other security vulnerability, any bug, etc. feel free to file [issues](https://github.com/DhavalKapil/image-uploader/issues) and submit [pull requests](https://github.com/DhavalKapil/image-uploader/pulls).\r\n\r\n## Developers\r\n\r\n- [Dhaval Kapil](https://github.com/DhavalKapil)\r\n\r\n- [Aditya Prakash](https://github.com/adiitya)\r\n \r\n## License\r\n\r\nimage-uploader is licensed under the MIT license.\r\n","google":"UA-51308700-1","note":"Don't delete this file! It's used internally to help with page regeneration."}